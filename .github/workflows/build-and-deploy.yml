name: Build and Deploy TeamSphere

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  BACKEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/teamsphere-backend
  FRONTEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/teamsphere-frontend

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug secrets
      run: |
        echo "Docker username exists: ${{ secrets.DOCKER_USERNAME != '' }}"
        echo "Docker password exists: ${{ secrets.DOCKER_PASSWORD != '' }}"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend
      uses: docker/build-push-action@v5
      with:
        context: ./teamsphere-backend
        file: ./teamsphere-backend/Dockerfile
        push: true
        tags: |
          ${{ env.BACKEND_IMAGE }}:latest
          ${{ env.BACKEND_IMAGE }}:${{ github.sha }}

  build-frontend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug secrets
      run: |
        echo "Docker username exists: ${{ secrets.DOCKER_USERNAME != '' }}"
        echo "Docker password exists: ${{ secrets.DOCKER_PASSWORD != '' }}"

    - name: Check package files
      working-directory: ./teamsphere-frontend
      run: |
        echo "Contents of teamsphere-frontend directory:"
        ls -la
        echo "Checking for package.json:"
        cat package.json | head -10
        echo "Checking for package-lock.json:"
        if [ -f package-lock.json ]; then echo "package-lock.json exists"; else echo "package-lock.json missing"; fi

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        # Remove cache temporarily to avoid path issues

    - name: Install dependencies
      working-directory: ./teamsphere-frontend
      run: npm install --legacy-peer-deps

    - name: Build application
      working-directory: ./teamsphere-frontend
      run: npm run build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: ./teamsphere-frontend
        file: ./teamsphere-frontend/Dockerfile
        push: true
        tags: |
          ${{ env.FRONTEND_IMAGE }}:latest
          ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}

  deploy-local:
    needs: [build-backend, build-frontend]
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create deployment directory
      run: |
        mkdir -p ~/teamsphere-deployment
        cp docker-compose.yml ~/teamsphere-deployment/
        cp .env ~/teamsphere-deployment/ 2>/dev/null || true

    - name: Update docker-compose for production images
      working-directory: ~/teamsphere-deployment
      run: |
        sed -i 's|build:|# build:|g' docker-compose.yml
        sed -i 's|context: ./teamsphere-backend|# context: ./teamsphere-backend|g' docker-compose.yml
        sed -i 's|context: ./teamsphere-frontend|# context: ./teamsphere-frontend|g' docker-compose.yml
        sed -i '/dockerfile: Dockerfile/c\    image: ${{ env.BACKEND_IMAGE }}:latest' docker-compose.yml

    - name: Pull latest images
      run: |
        docker pull ${{ env.BACKEND_IMAGE }}:latest
        docker pull ${{ env.FRONTEND_IMAGE }}:latest

    - name: Deploy application
      working-directory: ~/teamsphere-deployment
      run: |
        docker-compose down || true
        docker-compose up -d

    - name: Wait for services
      run: sleep 30

    - name: Health check
      run: |
        curl -f http://localhost:5001/api/projects/health || exit 1
        curl -f http://localhost || exit 1
        echo "✅ Deployment successful!"
        echo "✅ Deployment successful!"
